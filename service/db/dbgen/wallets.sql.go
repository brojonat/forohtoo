// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: wallets.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
    address,
    network,
    asset_type,
    token_mint,
    associated_token_address,
    poll_interval,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address
`

type CreateWalletParams struct {
	Address                string          `json:"address"`
	Network                string          `json:"network"`
	AssetType              string          `json:"asset_type"`
	TokenMint              string          `json:"token_mint"`
	AssociatedTokenAddress pgtype.Text     `json:"associated_token_address"`
	PollInterval           pgtype.Interval `json:"poll_interval"`
	Status                 string          `json:"status"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
		arg.AssociatedTokenAddress,
		arg.PollInterval,
		arg.Status,
	)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Network,
		&i.AssetType,
		&i.TokenMint,
		&i.AssociatedTokenAddress,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE address = $1 AND network = $2 AND asset_type = $3 AND token_mint = $4
`

type DeleteWalletParams struct {
	Address   string `json:"address"`
	Network   string `json:"network"`
	AssetType string `json:"asset_type"`
	TokenMint string `json:"token_mint"`
}

func (q *Queries) DeleteWallet(ctx context.Context, arg DeleteWalletParams) error {
	_, err := q.db.Exec(ctx, deleteWallet,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
	)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address FROM wallets
WHERE address = $1 AND network = $2 AND asset_type = $3 AND token_mint = $4
`

type GetWalletParams struct {
	Address   string `json:"address"`
	Network   string `json:"network"`
	AssetType string `json:"asset_type"`
	TokenMint string `json:"token_mint"`
}

func (q *Queries) GetWallet(ctx context.Context, arg GetWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWallet,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
	)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Network,
		&i.AssetType,
		&i.TokenMint,
		&i.AssociatedTokenAddress,
	)
	return i, err
}

const listActiveWallets = `-- name: ListActiveWallets :many
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address FROM wallets
WHERE status = 'active'
ORDER BY last_poll_time ASC NULLS FIRST
`

func (q *Queries) ListActiveWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listActiveWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Address,
			&i.PollInterval,
			&i.LastPollTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Network,
			&i.AssetType,
			&i.TokenMint,
			&i.AssociatedTokenAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWalletAssets = `-- name: ListWalletAssets :many
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address FROM wallets
WHERE address = $1 AND network = $2
ORDER BY asset_type, token_mint
`

type ListWalletAssetsParams struct {
	Address string `json:"address"`
	Network string `json:"network"`
}

func (q *Queries) ListWalletAssets(ctx context.Context, arg ListWalletAssetsParams) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWalletAssets, arg.Address, arg.Network)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Address,
			&i.PollInterval,
			&i.LastPollTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Network,
			&i.AssetType,
			&i.TokenMint,
			&i.AssociatedTokenAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWallets = `-- name: ListWallets :many
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address FROM wallets
ORDER BY created_at DESC
`

func (q *Queries) ListWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Address,
			&i.PollInterval,
			&i.LastPollTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Network,
			&i.AssetType,
			&i.TokenMint,
			&i.AssociatedTokenAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWalletsByAddress = `-- name: ListWalletsByAddress :many
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address FROM wallets
WHERE address = $1
ORDER BY network, asset_type, token_mint
`

func (q *Queries) ListWalletsByAddress(ctx context.Context, address string) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWalletsByAddress, address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Address,
			&i.PollInterval,
			&i.LastPollTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Network,
			&i.AssetType,
			&i.TokenMint,
			&i.AssociatedTokenAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalletPollInterval = `-- name: UpdateWalletPollInterval :one
UPDATE wallets
SET
    poll_interval = $5,
    updated_at = NOW()
WHERE address = $1 AND network = $2 AND asset_type = $3 AND token_mint = $4
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address
`

type UpdateWalletPollIntervalParams struct {
	Address      string          `json:"address"`
	Network      string          `json:"network"`
	AssetType    string          `json:"asset_type"`
	TokenMint    string          `json:"token_mint"`
	PollInterval pgtype.Interval `json:"poll_interval"`
}

func (q *Queries) UpdateWalletPollInterval(ctx context.Context, arg UpdateWalletPollIntervalParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWalletPollInterval,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
		arg.PollInterval,
	)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Network,
		&i.AssetType,
		&i.TokenMint,
		&i.AssociatedTokenAddress,
	)
	return i, err
}

const updateWalletPollTime = `-- name: UpdateWalletPollTime :one
UPDATE wallets
SET
    last_poll_time = $5,
    updated_at = NOW()
WHERE address = $1 AND network = $2 AND asset_type = $3 AND token_mint = $4
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address
`

type UpdateWalletPollTimeParams struct {
	Address      string             `json:"address"`
	Network      string             `json:"network"`
	AssetType    string             `json:"asset_type"`
	TokenMint    string             `json:"token_mint"`
	LastPollTime pgtype.Timestamptz `json:"last_poll_time"`
}

func (q *Queries) UpdateWalletPollTime(ctx context.Context, arg UpdateWalletPollTimeParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWalletPollTime,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
		arg.LastPollTime,
	)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Network,
		&i.AssetType,
		&i.TokenMint,
		&i.AssociatedTokenAddress,
	)
	return i, err
}

const updateWalletStatus = `-- name: UpdateWalletStatus :one
UPDATE wallets
SET
    status = $5,
    updated_at = NOW()
WHERE address = $1 AND network = $2 AND asset_type = $3 AND token_mint = $4
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address
`

type UpdateWalletStatusParams struct {
	Address   string `json:"address"`
	Network   string `json:"network"`
	AssetType string `json:"asset_type"`
	TokenMint string `json:"token_mint"`
	Status    string `json:"status"`
}

func (q *Queries) UpdateWalletStatus(ctx context.Context, arg UpdateWalletStatusParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWalletStatus,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
		arg.Status,
	)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Network,
		&i.AssetType,
		&i.TokenMint,
		&i.AssociatedTokenAddress,
	)
	return i, err
}

const upsertWallet = `-- name: UpsertWallet :one
INSERT INTO wallets (
    address,
    network,
    asset_type,
    token_mint,
    associated_token_address,
    poll_interval,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
ON CONFLICT (address, network, asset_type, token_mint)
DO UPDATE SET
    poll_interval = EXCLUDED.poll_interval,
    associated_token_address = EXCLUDED.associated_token_address,
    status = EXCLUDED.status,
    updated_at = NOW()
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at, network, asset_type, token_mint, associated_token_address
`

type UpsertWalletParams struct {
	Address                string          `json:"address"`
	Network                string          `json:"network"`
	AssetType              string          `json:"asset_type"`
	TokenMint              string          `json:"token_mint"`
	AssociatedTokenAddress pgtype.Text     `json:"associated_token_address"`
	PollInterval           pgtype.Interval `json:"poll_interval"`
	Status                 string          `json:"status"`
}

func (q *Queries) UpsertWallet(ctx context.Context, arg UpsertWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, upsertWallet,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
		arg.AssociatedTokenAddress,
		arg.PollInterval,
		arg.Status,
	)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Network,
		&i.AssetType,
		&i.TokenMint,
		&i.AssociatedTokenAddress,
	)
	return i, err
}

const walletExists = `-- name: WalletExists :one
SELECT EXISTS(SELECT 1 FROM wallets WHERE address = $1 AND network = $2 AND asset_type = $3 AND token_mint = $4)
`

type WalletExistsParams struct {
	Address   string `json:"address"`
	Network   string `json:"network"`
	AssetType string `json:"asset_type"`
	TokenMint string `json:"token_mint"`
}

func (q *Queries) WalletExists(ctx context.Context, arg WalletExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, walletExists,
		arg.Address,
		arg.Network,
		arg.AssetType,
		arg.TokenMint,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
