// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: wallets.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
    address,
    poll_interval,
    status
) VALUES (
    $1, $2, $3
)
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at
`

type CreateWalletParams struct {
	Address      string          `json:"address"`
	PollInterval pgtype.Interval `json:"poll_interval"`
	Status       string          `json:"status"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet, arg.Address, arg.PollInterval, arg.Status)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE address = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, address string) error {
	_, err := q.db.Exec(ctx, deleteWallet, address)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at FROM wallets
WHERE address = $1
`

func (q *Queries) GetWallet(ctx context.Context, address string) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWallet, address)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveWallets = `-- name: ListActiveWallets :many
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at FROM wallets
WHERE status = 'active'
ORDER BY last_poll_time ASC NULLS FIRST
`

func (q *Queries) ListActiveWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listActiveWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Address,
			&i.PollInterval,
			&i.LastPollTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWallets = `-- name: ListWallets :many
SELECT address, poll_interval, last_poll_time, status, created_at, updated_at FROM wallets
ORDER BY created_at DESC
`

func (q *Queries) ListWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, listWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Address,
			&i.PollInterval,
			&i.LastPollTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalletPollTime = `-- name: UpdateWalletPollTime :one
UPDATE wallets
SET
    last_poll_time = $2,
    updated_at = NOW()
WHERE address = $1
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at
`

type UpdateWalletPollTimeParams struct {
	Address      string             `json:"address"`
	LastPollTime pgtype.Timestamptz `json:"last_poll_time"`
}

func (q *Queries) UpdateWalletPollTime(ctx context.Context, arg UpdateWalletPollTimeParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWalletPollTime, arg.Address, arg.LastPollTime)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWalletStatus = `-- name: UpdateWalletStatus :one
UPDATE wallets
SET
    status = $2,
    updated_at = NOW()
WHERE address = $1
RETURNING address, poll_interval, last_poll_time, status, created_at, updated_at
`

type UpdateWalletStatusParams struct {
	Address string `json:"address"`
	Status  string `json:"status"`
}

func (q *Queries) UpdateWalletStatus(ctx context.Context, arg UpdateWalletStatusParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWalletStatus, arg.Address, arg.Status)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.PollInterval,
		&i.LastPollTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const walletExists = `-- name: WalletExists :one
SELECT EXISTS(SELECT 1 FROM wallets WHERE address = $1)
`

func (q *Queries) WalletExists(ctx context.Context, address string) (bool, error) {
	row := q.db.QueryRow(ctx, walletExists, address)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
